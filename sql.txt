create database tabacaria;
use tabacaria;

CREATE TABLE Usuario (
      idusuario INT(11) NOT NULL AUTO_INCREMENT,
      email VARCHAR(100) NOT NULL UNIQUE,
      senha VARCHAR(150) NOT NULL,
      nome VARCHAR(100) NOT NULL,
      sobrenome VARCHAR(100) NOT NULL,
      cpf VARCHAR(20) NOT NULL UNIQUE,
      telefone VARCHAR(15),
      status BOOLEAN NOT NULL DEFAULT true,
      perfil VARCHAR(100),
      nascimento VARCHAR(45),
      PRIMARY KEY (idusuario)
);

CREATE TABLE Idproduto (
      idproduto INT(11) NOT NULL AUTO_INCREMENT,
      status BOOLEAN NOT NULL DEFAULT true,
      nome VARCHAR(100) NOT NULL,
      descricao VARCHAR(100),
      palavras_chave VARCHAR(100) NOT NULL,
      imagem TEXT,
      valor DECIMAL(10,2),
      descricao_curta VARCHART(50),
      descricao_longa TEXT,
      PRIMARY KEY (idproduto)
);

CREATE TABLE Funcionario (
      idusuario int(11) NOT NULL AUTO_INCREMENT,
      nome varchar(100) NOT NULL,
      cpf varchar(20) NOT NULL UNIQUE,
      telefone varchar(15),
      varchar(100) not null unique,
      senha varchar(30) not null,
      status boolean default true,
      PRIMARY KEY (`idusuario`)
);

CREATE TABLE Cliente (
      idcliente INT(11) NOT NULL AUTO_INCREMENT,
      nome VARCHAR(100) NOT NULL,
      sobrenome VARCHAR(100) NOT NULL,
      email VARCHAR(100) NOT NULL,
      cpf VARCHAR(15) NOT NULL,
      senha VARCHAR(150) NOT NULL,
      telefone VARCHAR(15) NULL,
      dateNasc VARCHAR(45) NULL,
      PRIMARY KEY (`idcliente`)
);

CREATE table modulo(
idmodulo int auto_increment not null primary key,
nome varchar(30) not null unique);

create table usuario_modulo(
idusuario int(11) not null,
idmodulo int(11) not null,
foreign key(idusuario) references usuario (idusuario),
foreign key(idmodulo) references modulo (idmodulo)
);

INSERT INTO modulo(nome)
values ('USUARIO');
INSERT INTO modulo(nome)
values ('PRODUTO');
INSERT INTO modulo(nome)
values ('ESTOQUE');

INSERT INTO usuario (nome,cpf,login,senha,telefone) VALUES ('administrador', '12345678910', 'admin@tabacaria.com', 'admin', '1199999999');

INSERT INTO usuario_modulo (idusuario,idmodulo) VALUES (1,1);
INSERT INTO usuario_modulo (idusuario,idmodulo) VALUES (1,2);
INSERT INTO usuario_modulo (idusuario,idmodulo) VALUES (1,3);

INSERT INTO usuario (nome,cpf,login,senha,telefone) VALUES ('Carlos', '12345678911', 'produto@tabacaria.com', 'produto', '1199999911');

INSERT INTO usuario_modulo (idusuario,idmodulo) VALUES (2,2);




CREATE TABLE `produto` (
`id` INT(11) NOT NULL AUTO_INCREMENT,
`status` BOOLEAN NOT NULL DEFAULT true,
`nome` VARCHAR(100) NOT NULL,
`descricao` VARCHAR(100) NULL DEFAULT NULL,
`palavra_chave` VARCHAR(100) NOT NULL,
`img` VARCHAR(50) NOT NULL,
PRIMARY KEY (`id`));

CREATE TABLE `entrada_produto` (
`id` INT(11) NOT NULL AUTO_INCREMENT,
`id_produto` INT(11) NULL DEFAULT NULL,
`qtde` INT(11) NULL DEFAULT NULL,
`valor_venda` DECIMAL(9,2) NULL DEFAULT '0.00',
`data_entrada` DATE NULL DEFAULT NULL,
PRIMARY KEY (`id`));

CREATE TABLE `estoque` (
`id` INT(11) NOT NULL AUTO_INCREMENT,
`id_produto` INT(11) NULL DEFAULT NULL,
`qtde` INT(11) NULL DEFAULT NULL,
`valor_venda` DECIMAL(9,2) NULL DEFAULT '0.00',
PRIMARY KEY (`id`));

CREATE TABLE `saida_produto` (
`id` INT(11) NOT NULL AUTO_INCREMENT,
`id_venda` int(11) NOT NULL,
`id_produto` INT(11) NULL DEFAULT NULL,
`qtde` INT(11) NULL DEFAULT NULL,
`data_saida` DATE NULL DEFAULT NULL,
`valor_venda` DECIMAL(9,2) NULL DEFAULT '0.00',
PRIMARY KEY (`id`));

DELIMITER //
  CREATE PROCEDURE `SP_AtualizaEstoque`( id_prod int, qtde_comprada int, valor_vend decimal(9,2))
BEGIN
    declare contador int(11);
 
    SELECT count(*) into contador FROM estoque WHERE id_produto = id_prod;
 
    IF contador > 0 THEN
        UPDATE estoque SET qtde=qtde + qtde_comprada, valor_venda= valor_vend
        WHERE id_produto = id_prod;
    ELSE
        INSERT INTO estoque (id_produto, qtde, valor_venda) values (id_prod, qtde_comprada, valor_vend);
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AI` AFTER INSERT ON `entrada_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde, new.valor_venda);
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AU` AFTER UPDATE ON `entrada_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde - old.qtde, new.valor_venda);
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER `TRG_EntradaProduto_AD` AFTER DELETE ON `entrada_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (old.id_produto, old.qtde * -1, old.valor_venda);
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER `TRG_SaidaProduto_AI` AFTER INSERT ON `saida_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (new.id_produto, new.qtde * -1, new.valor_venda);
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER `TRG_SaidaProduto_AD` AFTER DELETE ON `saida_produto`
FOR EACH ROW
BEGIN
      CALL SP_AtualizaEstoque (old.id_produto, old.qtde, old.valor_venda);
END //
DELIMITER ;

CREATE TABLE endereco (
  idendereco INT NOT NULL AUTO_INCREMENT primary key,
  idcliente INT NOT NULL,
  cep VARCHAR(10) NOT NULL,
  endereco VARCHAR(100) NOT NULL,
  bairro VARCHAR(100) NOT NULL,
  cidade VARCHAR(50) NOT NULL,
  uf VARCHAR(50) NOT NULL,
  status boolean default true,
  FOREIGN KEY (idcliente) REFERENCES CLIENTE (idcliente));

create table venda(
idvenda int not null auto_increment primary key,
idcliente int not null,
idendereco int not null,
precofinal double not null,
datavenda date,
pagamento varchar(20),
status varchar(30) DEFAULT 'aguardando pagamento',
foreign key(idcliente) references cliente (idcliente),
foreign key(idendereco) references endereco (idendereco)
);
